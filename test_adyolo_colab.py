#!/usr/bin/env python3
"""
Script de validation ADYOLOv5-Face sp√©cialement con√ßu pour Google Colab
Ce script sera utilis√© par colab_setup.py pour v√©rifier que tout fonctionne correctement
"""

import torch
import sys
import os
from pathlib import Path

def test_adyolo_colab():
    """Test sp√©cifique pour Google Colab apr√®s setup"""
    
    print("üîç Validation ADYOLOv5-Face pour Google Colab")
    print("=" * 60)
    
    # Test 1: Environment
    print("1. Environment Check...")
    print(f"   Python: {sys.version.split()[0]}")
    print(f"   PyTorch: {torch.__version__}")
    print(f"   CUDA: {torch.cuda.is_available()}")
    if torch.cuda.is_available():
        print(f"   GPU: {torch.cuda.get_device_name(0)}")
    
    # Test 2: Directory structure
    print("\n2. Directory Structure Check...")
    required_dirs = [
        '/content/yolov5-face',
        '/content/yolov5-face/models',
        '/content/yolov5-face/data'
    ]
    
    for dir_path in required_dirs:
        if os.path.exists(dir_path):
            print(f"   ‚úÖ {dir_path}")
        else:
            print(f"   ‚ùå {dir_path} - MISSING")
            return False
    
    # Test 3: Critical files
    print("\n3. Critical Files Check...")
    critical_files = [
        '/content/yolov5-face/models/gd.py',
        '/content/yolov5-face/models/adyolov5s_simple.yaml',  
        '/content/yolov5-face/data/hyp.adyolo.yaml'
    ]
    
    for file_path in critical_files:
        if os.path.exists(file_path):
            print(f"   ‚úÖ {file_path}")
        else:
            print(f"   ‚ùå {file_path} - MISSING")
            return False
    
    # Test 4: Imports (le plus critique)
    print("\n4. Import Test...")
    try:
        # Ajouter le path YOLOv5-Face
        sys.path.insert(0, '/content/yolov5-face')
        
        print("   Testing models.gd...")
        from models.gd import GDFusion, AttentionFusion, TransformerFusion
        print("   ‚úÖ GD modules imported")
        
        print("   Testing models.common...")
        from models.common import Conv, C3, SPPF
        print("   ‚úÖ Common modules imported")
        
        print("   Testing models.yolo...")
        from models.yolo import Model, Detect
        print("   ‚úÖ YOLO modules imported")
        
        print("   ‚úÖ NO CIRCULAR IMPORT - SUCCESS!")
        
    except Exception as e:
        print(f"   ‚ùå Import failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # Test 5: Module instantiation
    print("\n5. Module Instantiation Test...")
    try:
        # Test GDFusion avec diff√©rents param√®tres
        gd1 = GDFusion([256, 256], 256, 'attention')
        gd2 = GDFusion(256, 256, 'transformer')
        print("   ‚úÖ GDFusion modules created")
        
        # Test forward pass
        x1 = torch.randn(1, 256, 32, 32)
        x2 = torch.randn(1, 256, 32, 32)
        
        with torch.no_grad():
            out1 = gd1([x1, x2])
            out2 = gd2([x1, x2])
        
        print(f"   ‚úÖ Forward pass: {out1.shape}, {out2.shape}")
        
    except Exception as e:
        print(f"   ‚ùå Module test failed: {e}")
        return False
    
    # Test 6: Model creation
    print("\n6. ADYOLOv5-Face Model Test...")
    try:
        config_path = '/content/yolov5-face/models/adyolov5s_simple.yaml'
        
        # Cr√©er le mod√®le
        model = Model(config_path, ch=3, nc=1)
        model.eval()
        
        print(f"   ‚úÖ Model created")
        print(f"   Detection heads: {len(model.detect_layers)}")
        
        # V√©rifier que c'est bien ADYOLOv5 (4 t√™tes de d√©tection)
        if len(model.detect_layers) == 4:
            print("   ‚úÖ ADYOLOv5-Face confirmed (4 detection heads)")
        else:
            print(f"   ‚ö† Expected 4 heads, got {len(model.detect_layers)}")
        
        # Test forward pass
        device = 'cuda' if torch.cuda.is_available() else 'cpu'
        model = model.to(device)
        
        test_input = torch.randn(1, 3, 640, 640).to(device)
        
        with torch.no_grad():
            output = model(test_input)
        
        if isinstance(output, tuple):
            pred, features = output
            print(f"   ‚úÖ Forward pass successful: {pred.shape}")
        else:
            print(f"   ‚úÖ Forward pass successful: {output.shape}")
            
    except Exception as e:
        print(f"   ‚ùå Model test failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print("\n" + "=" * 60)
    print("üéâ ALL TESTS PASSED!")
    print("‚úÖ ADYOLOv5-Face is ready for training on Google Colab!")
    print("‚úÖ No circular import issues!")
    print("‚úÖ PyTorch 2.6+ compatible!")
    print("=" * 60)
    
    return True

if __name__ == "__main__":
    success = test_adyolo_colab()
    if not success:
        print("\n‚ùå Validation failed. Please check the setup.")
        sys.exit(1)
    else:
        print("\nüöÄ Ready for training with: python main.py --model-size ad")
