#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script pour corriger le fichier train.py de YOLOv5-Face
Ce script doit √™tre ex√©cut√© juste APR√àS le script colab_setup.py
et AVANT le lancement de l'entra√Ænement avec main.py

Ce script est con√ßu pour √™tre robuste contre les ex√©cutions multiples
et corrige √©galement les applications incorrectes pr√©c√©dentes.
"""

import os
import re
import sys

def fix_pytorch_compatibility(yolo_dir='/content/yolov5-face'):
    """
    Corrige le fichier train.py pour PyTorch 2.6+
    en ajoutant correctement le param√®tre weights_only=False √† torch.load
    """
    print("\n" + "=" * 70)
    print(" CORRECTION DU FICHIER TRAIN.PY POUR PYTORCH 2.6+ ".center(70, "="))
    print("=" * 70 + "\n")
    
    train_path = '/content/yolov5-face/train.py'
    
    if not os.path.exists(train_path):
        print(f"‚ùå ERREUR: Fichier {train_path} non trouv√©!")
        print("Assurez-vous que le d√©p√¥t YOLOv5-Face a bien √©t√© clon√©.")
        return False
    
    # Lire le contenu du fichier
    with open(train_path, 'r') as f:
        content = f.read()
    
    # √âTAPE 1: V√©rifier si le fichier contient d√©j√† une correction incorrecte
    # et la corriger en premier lieu
    incorrect_patterns = [
        r'(ckpt\s*=\s*torch\.load\s*\(\s*weights\s*,\s*map_location\s*=\s*device\s*\))\s*,\s*weights_only\s*=\s*False',
        r'(torch\.load\s*\(\s*weights\s*,\s*map_location\s*=\s*device\s*\))\s*,\s*weights_only\s*=\s*False',
    ]
    
    for pattern in incorrect_patterns:
        match = re.search(pattern, content)
        if match:
            # Trouv√© une correction incorrecte (param√®tre outside des parenth√®ses)
            full_match = match.group(0)
            inner_part = match.group(1)
            
            # Cr√©er la correction appropri√©e
            correct_replacement = inner_part.replace(')', ', weights_only=False)')
            
            # Remplacer la partie incorrecte par la version corrig√©e
            content = content.replace(full_match, correct_replacement)
            print(f"‚úÖ Correction d'une application incorrecte pr√©c√©dente: {full_match}")
            print(f"   Nouvelle version: {correct_replacement}")
    
    # √âTAPE 2: Corriger les cas o√π le param√®tre a √©t√© ajout√© en double, triple, etc.
    # Exemple: ckpt = torch.load(weights, map_location=device, weights_only=False, weights_only=False)
    doubled_pattern = r'torch\.load\s*\([^)]*weights_only\s*=\s*False[^)]*weights_only\s*=\s*False'
    
    if re.search(doubled_pattern, content):
        print("‚ö†Ô∏è D√©tection d'une multiple application du param√®tre weights_only=False")
        
        # Extraire toutes les lignes avec torch.load
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if 'torch.load' in line and 'weights' in line:
                # Comptez combien de fois 'weights_only=False' appara√Æt
                weights_only_count = line.count('weights_only=False')
                
                if weights_only_count > 1:
                    print(f"Ligne probl√©matique trouv√©e ({i+1}): {line}")
                    
                    # Construire une nouvelle ligne correcte
                    if 'ckpt =' in line:
                        # Cas pour ckpt = torch.load(...)
                        new_line = 'ckpt = torch.load(weights, map_location=device, weights_only=False)  # load checkpoint'
                    else:
                        # Autre cas g√©n√©ral
                        new_line = line.split('torch.load')[0] + 'torch.load(weights, map_location=device, weights_only=False)'
                        if '#' in line:
                            new_line += '  ' + line.split('#')[-1]
                    
                    lines[i] = new_line
                    print(f"‚úÖ Ligne corrig√©e: {new_line}")
        
        # Reconstruire le contenu
        content = '\n'.join(lines)
    
    # √âTAPE 3: V√©rifier si le param√®tre weights_only=False est correctement pr√©sent
    # S'il est d√©j√† pr√©sent et correctement format√©, pas besoin d'appliquer la correction
    correct_pattern = r'torch\.load\s*\(\s*weights\s*,\s*map_location\s*=\s*device\s*,\s*weights_only\s*=\s*False\s*\)'
    
    if re.search(correct_pattern, content):
        print("‚úÖ Le fichier train.py est d√©j√† correctement modifi√©.")
        print("Le param√®tre weights_only=False est pr√©sent au bon format.")
        
        # Sauvegarder le contenu au cas o√π il a √©t√© modifi√© √† l'√©tape 1 ou 2
        with open(train_path, 'w') as f:
            f.write(content)
        
        return True
    
    # √âTAPE 4: Appliquer la correction si n√©cessaire
    print("üîÑ Application de la correction...")
    
    # Chercher la ligne qui correspond au format standard
    standard_pattern = r'ckpt\s*=\s*torch\.load\s*\(\s*weights\s*,\s*map_location\s*=\s*device\s*\)'
    
    if re.search(standard_pattern, content):
        # Trouv√© le format standard
        match = re.search(standard_pattern, content)
        original = match.group(0)
        replacement = original.replace(')', ', weights_only=False)')
        
        content = content.replace(original, replacement)
        print(f"‚úÖ Correction appliqu√©e: {original} ‚Üí {replacement}")
    else:
        # Si le format standard n'est pas trouv√©, rechercher d'autres variantes
        print("üîç Format standard non trouv√©, recherche d'autres variantes...")
        
        # Chercher toutes les lignes qui contiennent torch.load avec weights et map_location
        lines = content.split('\n')
        found = False
        
        for i, line in enumerate(lines):
            if 'torch.load' in line and 'weights' in line and 'map_location' in line and 'weights_only=False' not in line:
                print(f"Ligne trouv√©e ({i+1}): {line}")
                
                # Trouver la position de la parenth√®se fermante apr√®s torch.load
                open_paren = line.find('torch.load(')
                if open_paren >= 0:
                    # Compter les parenth√®ses ouvrantes et fermantes pour trouver la bonne parenth√®se fermante
                    open_count = 0
                    close_paren_pos = -1
                    
                    for j, char in enumerate(line[open_paren:]):
                        if char == '(':
                            open_count += 1
                        elif char == ')':
                            open_count -= 1
                            if open_count == 0:
                                close_paren_pos = open_paren + j
                                break
                    
                    if close_paren_pos > 0:
                        # Ins√©rer weights_only=False juste avant la parenth√®se fermante
                        modified_line = line[:close_paren_pos] + ', weights_only=False' + line[close_paren_pos:]
                        lines[i] = modified_line
                        print(f"‚úÖ Ligne modifi√©e: {modified_line}")
                        found = True
                        break
        
        if found:
            content = '\n'.join(lines)
        else:
            print("‚ùå Impossible de trouver une ligne appropri√©e pour appliquer la correction.")
            return False
    
    # Sauvegarder le fichier modifi√©
    try:
        with open(train_path, 'w') as f:
            f.write(content)
        
        # V√©rifier que la modification a bien √©t√© appliqu√©e
        with open(train_path, 'r') as f:
            check_content = f.read()
        
        if 'weights_only=False' in check_content:
            if re.search(correct_pattern, check_content) or not re.search(doubled_pattern, check_content):
                print("\n‚úÖ SUCC√àS: Le fichier train.py a √©t√© correctement modifi√©!")
                print("Le param√®tre weights_only=False a bien √©t√© ajout√© au bon format.")
                return True
            else:
                print("\n‚ö†Ô∏è La correction a √©t√© appliqu√©e mais pourrait n√©cessiter une v√©rification.")
                return True
        else:
            print("\n‚ùå ERREUR: La modification n'a pas √©t√© correctement enregistr√©e!")
            return False
            
    except Exception as e:
        print(f"\n‚ùå ERREUR lors de la sauvegarde du fichier: {e}")
        return False

if __name__ == "__main__":
    fix_pytorch_compatibility()
