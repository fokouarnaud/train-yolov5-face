#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script d√©finitif pour corriger le probl√®me de conversion de type dans loss.py
Ce script utilise plusieurs approches pour garantir que la correction est appliqu√©e correctement
"""

import os
import re
import traceback
import subprocess

def fix_loss_py(yolo_dir='/content/yolov5-face'):
    """
    Corrige d√©finitivement le probl√®me de conversion de type dans le fichier loss.py
    
    Args:
        yolo_dir (str): R√©pertoire de YOLOv5-Face
        
    Returns:
        bool: True si la correction a r√©ussi, False sinon
    """
    print("\n" + "=" * 70)
    print(" CORRECTION D√âFINITIVE DU FICHIER LOSS.PY ".center(70, "="))
    print("=" * 70 + "\n")
    
    loss_py_path = os.path.join(yolo_dir, 'utils', 'loss.py')
    
    if not os.path.exists(loss_py_path):
        print(f"‚ùå ERREUR: Fichier {loss_py_path} non trouv√©!")
        print("Assurez-vous que le d√©p√¥t YOLOv5-Face a bien √©t√© clon√©.")
        return False
    
    # Sauvegarder une copie du fichier original
    backup_path = loss_py_path + '.backup'
    try:
        with open(loss_py_path, 'r') as f_src:
            with open(backup_path, 'w') as f_dst:
                f_dst.write(f_src.read())
        print(f"‚úì Sauvegarde cr√©√©e: {backup_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è Impossible de cr√©er une sauvegarde: {e}")
    
    try:
        # M√âTHODE 1: Utilisation de commandes sed (plus fiable)
        try:
            print("M√©thode 1: Utilisation de sed pour remplacer les expressions clamp_...")
            
            # Remplacer les deux expressions clamp_ en une seule commande
            subprocess.run([
                'sed', '-i', 
                's/gj.clamp_\\(0, gain\\[3\\] - 1\\)/gj.clamp_(0, gain[3] - 1).long()/g; s/gi.clamp_\\(0, gain\\[2\\] - 1\\)/gi.clamp_(0, gain[2] - 1).long()/g', 
                loss_py_path
            ], check=False)
            
            # V√©rifier si la modification a √©t√© appliqu√©e
            with open(loss_py_path, 'r') as f:
                content = f.read()
            
            if '.long()' in content:
                print("‚úÖ M√©thode 1 r√©ussie: Modifications appliqu√©es avec sed")
                return True
            else:
                print("‚ÑπÔ∏è M√©thode 1 n'a pas appliqu√© les modifications. Essai avec la m√©thode 2...")
        except Exception as e:
            print(f"‚ÑπÔ∏è M√©thode 1 a √©chou√©: {e}")
        
        # M√âTHODE 2: Recherche du motif exact et remplacement
        print("M√©thode 2: Recherche du motif exact et remplacement...")
        
        with open(loss_py_path, 'r') as f:
            content = f.read()
        
        exact_pattern = 'indices.append((b, a, gj.clamp_(0, gain[3] - 1), gi.clamp_(0, gain[2] - 1)))'
        replacement = 'indices.append((b, a, gj.clamp_(0, gain[3] - 1).long(), gi.clamp_(0, gain[2] - 1).long()))'
        
        if exact_pattern in content:
            modified_content = content.replace(exact_pattern, replacement)
            
            with open(loss_py_path, 'w') as f:
                f.write(modified_content)
            
            print("‚úÖ M√©thode 2 r√©ussie: Motif exact trouv√© et remplac√©")
            return True
        else:
            print("‚ÑπÔ∏è Motif exact non trouv√©. Essai avec la m√©thode 3...")
        
        # M√âTHODE 3: Utilisation d'expressions r√©guli√®res plus flexibles
        print("M√©thode 3: Utilisation d'expressions r√©guli√®res...")
        
        with open(loss_py_path, 'r') as f:
            lines = f.readlines()
        
        regex_pattern = r'indices\.append\(\(b,\s*a,\s*gj\.clamp_\(0,\s*gain\[3\]\s*-\s*1\)(\.long\(\))?,\s*gi\.clamp_\(0,\s*gain\[2\]\s*-\s*1\)(\.long\(\))?\)\)'
        
        found = False
        for i, line in enumerate(lines):
            match = re.search(regex_pattern, line)
            if match:
                # V√©rifier si .long() est d√©j√† pr√©sent
                has_long_gj = match.group(1) is not None
                has_long_gi = match.group(2) is not None
                
                if not has_long_gj or not has_long_gi:
                    # Construire la nouvelle ligne avec .long()
                    # Format: indices.append((b, a, gj.clamp_(0, gain[3] - 1).long(), gi.clamp_(0, gain[2] - 1).long()))
                    parts = re.split(r'(gj\.clamp_\(0,\s*gain\[3\]\s*-\s*1\))', line)
                    if len(parts) >= 3:
                        parts[2] = '.long()' + parts[2] if not has_long_gj else parts[2]
                    
                    parts = re.split(r'(gi\.clamp_\(0,\s*gain\[2\]\s*-\s*1\))', ''.join(parts))
                    if len(parts) >= 3:
                        parts[2] = '.long()' + parts[2] if not has_long_gi else parts[2]
                    
                    new_line = ''.join(parts)
                    lines[i] = new_line
                    
                    print(f"‚úÖ Ligne {i+1} modifi√©e avec regex:")
                    print(f"  Avant: {line.strip()}")
                    print(f"  Apr√®s: {new_line.strip()}")
                    found = True
                else:
                    print(f"‚ÑπÔ∏è Ligne {i+1} d√©j√† modifi√©e (contient .long())")
                    found = True
        
        if found:
            with open(loss_py_path, 'w') as f:
                f.writelines(lines)
            
            print("‚úÖ M√©thode 3 r√©ussie: Modifications appliqu√©es avec regex")
            return True
        else:
            print("‚ÑπÔ∏è Motif regex non trouv√©. Essai avec la m√©thode 4...")
        
        # M√âTHODE 4: Analyse ligne par ligne pour trouver les lignes contenant clamp_
        print("M√©thode 4: Analyse ligne par ligne...")
        
        with open(loss_py_path, 'r') as f:
            lines = f.readlines()
        
        # Rechercher les lignes qui contiennent √† la fois "indices.append" et "clamp_"
        found = False
        for i, line in enumerate(lines):
            if 'indices.append' in line and 'clamp_' in line and '.long()' not in line:
                print(f"Ligne trouv√©e ({i+1}): {line.strip()}")
                
                # Remplacer les clamp_ par clamp_().long()
                modified_line = re.sub(
                    r'(gj|gi)\.clamp_\(([^)]+)\)',
                    r'\1.clamp_(\2).long()',
                    line
                )
                
                lines[i] = modified_line
                print(f"‚úÖ Ligne modifi√©e: {modified_line.strip()}")
                found = True
        
        if found:
            with open(loss_py_path, 'w') as f:
                f.writelines(lines)
            
            print("‚úÖ M√©thode 4 r√©ussie: Modifications appliqu√©es ligne par ligne")
            return True
        else:
            print("‚ÑπÔ∏è Aucune ligne compatible trouv√©e. Essai avec la m√©thode 5...")
        
        # M√âTHODE 5: Modification directe bas√©e sur les num√©ros de ligne connus
        print("M√©thode 5: Modification bas√©e sur les num√©ros de ligne connus...")
        
        # Selon l'erreur, le probl√®me est √† la ligne 248 de loss.py
        target_line_numbers = [248, 249, 247, 250]  # Essayer plusieurs lignes autour de 248
        
        with open(loss_py_path, 'r') as f:
            lines = f.readlines()
        
        if len(lines) < max(target_line_numbers):
            print(f"‚ö†Ô∏è Le fichier ne contient que {len(lines)} lignes, mais nous ciblons la ligne {max(target_line_numbers)}")
        
        found = False
        for line_num in target_line_numbers:
            if line_num <= len(lines):
                line_index = line_num - 1  # Ajustement pour l'indexation Python (0-based)
                line = lines[line_index]
                
                if 'clamp_' in line and 'indices.append' in line and '.long()' not in line:
                    print(f"Ligne cible trouv√©e ({line_num}): {line.strip()}")
                    
                    # Utiliser une expression r√©guli√®re pour ins√©rer .long() apr√®s chaque appel clamp_()
                    modified_line = re.sub(
                        r'(\.clamp_\([^)]+\))',
                        r'\1.long()',
                        line
                    )
                    
                    lines[line_index] = modified_line
                    print(f"‚úÖ Ligne modifi√©e: {modified_line.strip()}")
                    found = True
                    break
        
        if found:
            with open(loss_py_path, 'w') as f:
                f.writelines(lines)
            
            print("‚úÖ M√©thode 5 r√©ussie: Modification appliqu√©e √† la ligne cible")
            return True
        else:
            print("‚ùå Aucune m√©thode n'a r√©ussi √† appliquer la correction.")
            
            # Restaurer la sauvegarde si elle existe
            if os.path.exists(backup_path):
                try:
                    with open(backup_path, 'r') as f_src:
                        with open(loss_py_path, 'w') as f_dst:
                            f_dst.write(f_src.read())
                    print("‚úì Fichier original restaur√© depuis la sauvegarde")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors de la restauration: {e}")
            
            # Afficher les lignes contenant clamp_ pour aider √† un correctif manuel
            print("\nüîç Voici toutes les lignes contenant 'clamp_' dans le fichier:")
            with open(loss_py_path, 'r') as f:
                lines = f.readlines()
                for i, line in enumerate(lines):
                    if 'clamp_' in line:
                        print(f"Ligne {i+1}: {line.strip()}")
            
            print("\n‚ö†Ô∏è CORRECTION MANUELLE N√âCESSAIRE:")
            print("1. Localisez la ligne qui contient √† la fois 'indices.append' et 'clamp_'")
            print("2. Modifiez cette ligne en ajoutant '.long()' apr√®s chaque 'clamp_(...)'")
            print("3. Par exemple, transformez:")
            print("   indices.append((b, a, gj.clamp_(0, gain[3] - 1), gi.clamp_(0, gain[2] - 1)))")
            print("   en:")
            print("   indices.append((b, a, gj.clamp_(0, gain[3] - 1).long(), gi.clamp_(0, gain[2] - 1).long()))")
            
            return False
            
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la correction de loss.py: {e}")
        print(traceback.format_exc())
        
        # Restaurer la sauvegarde si elle existe
        if os.path.exists(backup_path):
            try:
                with open(backup_path, 'r') as f_src:
                    with open(loss_py_path, 'w') as f_dst:
                        f_dst.write(f_src.read())
                print("‚úì Fichier original restaur√© depuis la sauvegarde")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors de la restauration: {e}")
        
        return False
    
    # V√©rification finale
    with open(loss_py_path, 'r') as f:
        content = f.read()
    
    if '.long()' in content:
        # Supprimer la sauvegarde si tout s'est bien pass√©
        if os.path.exists(backup_path):
            try:
                os.remove(backup_path)
                print("‚úì Sauvegarde supprim√©e")
            except Exception as e:
                print(f"‚ö†Ô∏è Impossible de supprimer la sauvegarde: {e}")
        
        print("\nüéâ SUCC√àS: Le fichier loss.py a √©t√© correctement modifi√©!")
        print("Vous pouvez maintenant reprendre l'entra√Ænement.")
        return True
    else:
        print("\n‚ùå √âCHEC: Le fichier loss.py n'a pas √©t√© correctement modifi√©!")
        return False

if __name__ == "__main__":
    fix_loss_py()
