#!/usr/bin/env python3
"""
Script de v√©rification du nettoyage ADYOLOv5-Face
V√©rifie que toutes les r√©f√©rences utilisent maintenant le bon fichier YAML
"""

import os
import re
from pathlib import Path

def check_file_references(directory):
    """V√©rifie les r√©f√©rences aux fichiers YAML dans tous les scripts"""
    
    print(f"üîç V√©rification des r√©f√©rences dans {directory}")
    print("=" * 60)
    
    # Patterns √† chercher
    patterns = {
        'adyolov5s_simple': r'adyolov5s_simple\.yaml',
        'adyolov5s': r'adyolov5s\.yaml',
        'old_gatherlayer': r'adyolov5s_old_gatherlayer\.yaml'
    }
    
    results = {'files_checked': 0, 'references_found': {}}
    
    # Parcourir tous les fichiers Python
    for file_path in Path(directory).rglob('*.py'):
        results['files_checked'] += 1
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            for pattern_name, pattern in patterns.items():
                matches = re.findall(pattern, content)
                if matches:
                    if pattern_name not in results['references_found']:
                        results['references_found'][pattern_name] = []
                    results['references_found'][pattern_name].append(str(file_path))
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la lecture de {file_path}: {e}")
    
    return results

def verify_yaml_files(models_dir):
    """V√©rifie la pr√©sence et le contenu des fichiers YAML"""
    
    print(f"\nüìÅ V√©rification des fichiers YAML dans {models_dir}")
    print("=" * 60)
    
    # Fichiers attendus
    expected_files = {
        'adyolov5s.yaml': 'Fichier principal ADYOLOv5 avec GDFusion',
        'adyolov5s_old_gatherlayer.yaml': 'Ancien fichier avec GatherLayer (sauvegarde)'
    }
    
    for filename, description in expected_files.items():
        file_path = os.path.join(models_dir, filename)
        
        if os.path.exists(file_path):
            print(f"‚úÖ {filename}: {description}")
            
            # V√©rifier le contenu
            try:
                with open(file_path, 'r') as f:
                    content = f.read()
                
                if 'GDFusion' in content:
                    print(f"   üîß Contient GDFusion")
                elif 'GatherLayer' in content:
                    print(f"   üì¶ Contient GatherLayer (ancien syst√®me)")
                else:
                    print(f"   ‚ùì Syst√®me de fusion non identifi√©")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur de lecture: {e}")
        else:
            print(f"‚ùå {filename}: MANQUANT")

def main():
    """Fonction principale de v√©rification"""
    
    print("üßπ V√©rification du Nettoyage ADYOLOv5-Face")
    print("=" * 60)
    
    # Chemins √† v√©rifier
    base_path = os.path.dirname(os.path.abspath(__file__))
    models_dir = os.path.join(base_path, '..', 'yolov5-face', 'models')
    
    # 1. V√©rifier les fichiers YAML
    verify_yaml_files(models_dir)
    
    # 2. V√©rifier les r√©f√©rences dans les scripts
    results = check_file_references(base_path)
    
    print(f"\nüìä R√©sum√© de la v√©rification")
    print("=" * 60)
    print(f"Fichiers Python v√©rifi√©s: {results['files_checked']}")
    
    # Afficher les r√©f√©rences trouv√©es
    if results['references_found']:
        for pattern_name, files in results['references_found'].items():
            print(f"\nüîç R√©f√©rences '{pattern_name}':")
            for file_path in files:
                print(f"   - {file_path}")
    else:
        print("‚úÖ Aucune r√©f√©rence obsol√®te trouv√©e")
    
    # Recommandations
    print(f"\nüí° Recommandations:")
    
    if 'adyolov5s_simple' in results['references_found']:
        print("‚ùå Des r√©f√©rences √† 'adyolov5s_simple.yaml' ont √©t√© trouv√©es")
        print("   ‚Üí Ces r√©f√©rences doivent √™tre mises √† jour vers 'adyolov5s.yaml'")
    else:
        print("‚úÖ Aucune r√©f√©rence obsol√®te √† 'adyolov5s_simple.yaml'")
    
    if 'adyolov5s' in results['references_found']:
        print("‚úÖ R√©f√©rences correctes √† 'adyolov5s.yaml' trouv√©es")
    else:
        print("‚ö†Ô∏è Aucune r√©f√©rence √† 'adyolov5s.yaml' trouv√©e")
        print("   ‚Üí V√©rifiez que les scripts utilisent bien le bon fichier")
    
    print(f"\nüéØ Structure finale recommand√©e:")
    print(f"   ‚úÖ adyolov5s.yaml (principal, avec GDFusion)")
    print(f"   üìÅ adyolov5s_old_gatherlayer.yaml (sauvegarde)")
    print(f"   ‚ùå adyolov5s_simple.yaml (supprim√©)")
    
    print(f"\nüöÄ Pr√™t pour l'entra√Ænement ADYOLOv5-Face !")

if __name__ == "__main__":
    main()
